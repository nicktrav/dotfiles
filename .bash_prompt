#!/usr/bin/env bash

RED="\[\033[0;31m\]"
YELLOW="\[\033[0;33m\]"
GREEN="\[\033[0;32m\]"
NO_COLOUR="\[\033[0m\]"

if [ -f "$HOME/.bash_local" ]; then
  # shellcheck source=/dev/null
  source "$HOME/.bash_local"
fi

# If we're in a large git repo, short circuit. Set the NO_GIT_PROMP
# variable in .bash_local.
function _should_ignore {
  local in
  in=0

  if [ -z "$NO_GIT_PROMPT" ]; then
    echo "$in"
    return
  fi

  for element in "${NO_GIT_PROMPT[@]}"; do
    if [[ "$element" == "$(pwd)" ]]; then
      in=1
      break
    fi
  done

  echo $in
}

function _git_prompt() {
  if [ "$(_should_ignore)" == "1" ]; then echo
    return
  fi

  local git_status
  git_status=$(git status -unormal 2>&1)
  # Checks to see if we're in a git repo
  if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
    # if we're in a repo thats clean, then color it green
    if [[ "$git_status" =~ nothing\ to\ commit ]]; then
      local ansi=$GREEN
      # if the repos dirty, color it red
    elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
      local ansi=$RED
    else
      local ansi=$RED
    fi

    # Get git branch name
    # checks the output of git status for "On branch " then uses that to set the branch
    if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
      branch=${BASH_REMATCH[1]}
      #test "$branch" != master || branch=' '
    else
      # Detached HEAD.  (branch=HEAD is a faster alternative.)
      branch=$(git describe --all --contains --abbrev=4 HEAD 2> /dev/null || echo HEAD)
    fi
    # prints out " | $branch_name"
    # shellcheck disable=SC2016
    echo -n '| '"$ansi""$branch"'\[\e[0m\] [$(_git_changes)]'
  fi
}

function _git_changes {
[[ $(git rev-parse --is-inside-work-tree 2>/dev/null) == true ]] || return 1

local added_symbol="●"
local unmerged_symbol="✗"
local modified_symbol="+"
local clean_symbol="✔"
local has_untracked_files_symbol="…"

local ahead_symbol="↑"
local behind_symbol="↓"

local unmerged_count=0 modified_count=0 has_untracked_files=0 added_count=0 is_clean=""

# shellcheck disable=SC2046
set -- $(git rev-list --left-right --count '@{upstream}'...HEAD 2>/dev/null)
local behind_count=$1
local ahead_count=$2

# Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), changed (T), Unmerged (U), Unknown (X), Broken (B)
while read -r line; do
  case "$line" in
    M*) modified_count=$(( modified_count + 1 )) ;;
    U*) unmerged_count=$(( unmerged_count + 1 )) ;;
  esac
done < <(git diff --name-status)

while read -r line; do
  case "$line" in
    *) added_count=$(( added_count + 1 )) ;;
  esac
done < <(git diff --name-status --cached)

if [ -n "$(git ls-files --others --exclude-standard)" ]; then
  has_untracked_files=1
fi

if [ $(( unmerged_count + modified_count + has_untracked_files + added_count )) -eq 0 ]; then
  is_clean=1
fi

local leading_whitespace=""
[[ $ahead_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$ahead_symbol$ahead_count"; leading_whitespace=" "; }
[[ $behind_count -gt 0 ]]        && { printf "%s" "$leading_whitespace$behind_symbol$behind_count"; leading_whitespace=" "; }
[[ $modified_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$modified_symbol$modified_count"; leading_whitespace=" "; }
[[ $unmerged_count -gt 0 ]]      && { printf "%s" "$leading_whitespace$unmerged_symbol$unmerged_count"; leading_whitespace=" "; }
[[ $added_count -gt 0 ]]         && { printf "%s" "$leading_whitespace$added_symbol$added_count"; leading_whitespace=" "; }
[[ $has_untracked_files -gt 0 ]] && { printf "%s" "$leading_whitespace$has_untracked_files_symbol"; leading_whitespace=" "; }
[[ $is_clean -gt 0 ]]            && { printf "%s" "$leading_whitespace$clean_symbol"; leading_whitespace=" "; }
}

# Signal that the last command had a non-zero exit code.
function _last_status() {
  local EXIT="$?"
  if [[ "$EXIT" != "0" ]]; then
    echo -n "$RED!!$NO_COLOUR "
  fi
}

_PS1="$YELLOW\u$NO_COLOUR:\w$(_git_prompt)"
export _PS1
export PROMPT_COMMAND='export PS1="$(_last_status)${_PS1} $(_git_prompt)\n$ "'
